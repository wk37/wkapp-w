apply plugin: 'com.android.application'

def bulidTime() {
    return new Date().format("HHmm", TimeZone.getTimeZone("Asia/Shanghai"))
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
/*

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                // 输出apk名称为LittleSnail_v1.0_渠道 .apk
                outputFileName = "wk_${variant.productFlavors.name}_v${versionName}_${variant.buildType.name}_${bulidTime()}.apk"
            }
        }
    }
*/


    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
        applicationId "aacom.wangke.wkappw"

        multiDexEnabled true
        resConfigs "zh"/*,"en"*/
        ndk {
            abiFilters 'armeabi-v7a'/*,'arm64-v8a'*/
        }
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    /*    signingConfigs {
        config {
            storeFile file("../my.jks")
            storePassword "storePassword"
            keyAlias "keyAlias"
            keyPassword "keyPassword"
        }
    }*/

    buildTypes {
        release {
            buildConfigField "boolean", "LOG_DEBUG", "false"
//            signingConfig signingConfigs.config
            zipAlignEnabled true
            shrinkResources true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            buildConfigField "boolean", "LOG_DEBUG", "true"
//            signingConfig signingConfigs.config
            zipAlignEnabled true
            shrinkResources false
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

        }
    }
   /* flavorDimensions "wk"
    productFlavors {
        wkk {
            dimension "wk"
            applicationId "aacom.wangke.wkappw"
            buildConfigField "String", "wk_name", "\"wk_value\""
            manifestPlaceholders = [
                    WK_KEY1: "WK_VALUE1",
                    WK_KEY2: "WK_VALUE2"
            ]
        }

    }*/
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }
    //添加本地仓库，并把libs目录作为仓库地址
    repositories {
        flatDir {
            dirs 'libs'
            dirs project(':wkcore').file('libs')
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    testImplementation 'junit:junit:4.12'
    androidTestImplementation var.SupportTestRunner
    androidTestImplementation var.SupportTestEspresso

    api "com.android.support:appcompat-v7:$rootProject.ext.supportLibraryVersion"
    api "com.android.support:recyclerview-v7:$rootProject.ext.supportLibraryVersion"
    api "com.android.support:design:$rootProject.ext.supportLibraryVersion"
    api "com.android.support:support-fragment:$rootProject.ext.supportLibraryVersion"

    api project(':wkcore')


    implementation 'com.android.support.constraint:constraint-layout:1.1.2'

}

configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        def requested = details.requested
        if (requested.group == 'com.android.support') {
            if (!requested.name.startsWith("multidex")) {
                details.useVersion rootProject.ext.supportLibraryVersion
            }
        }
    }
}